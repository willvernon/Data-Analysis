population = max(Population),
cases_per_thou = 100* cases / population,
deaths_per_thou = 1000 * deaths / population) %>%
filter(cases > 0, population > 0)
US_state_totals %>%
slice_min(deaths_per_thou, n = 10)
US_state_totals %>%
slice_max(deaths_per_thou, n = 10)
US_state_totals <- US_by_state %>%
group_by(Province_State) %>%
summarise(deaths = max(deaths), cases = max(cases),
population = max(Population),
cases_per_thou = 100* cases / population,
deaths_per_thou = 1000 * deaths / population) %>%
filter(cases > 0, population > 0)
US_state_totals %>%
slice_min(deaths_per_thou, n = 10)
select(US_state_totals$deaths_per_thou, US_state_totals$cases_per_thou)
US_state_totals %>%
slice_min(deaths_per_thou, n = 10)
select(deaths_per_thou, cases_per_thou, everything())
US_state_totals <- US_by_state %>%
group_by(Province_State) %>%
summarise(deaths = max(deaths), cases = max(cases),
population = max(Population),
cases_per_thou = 1000 * cases / population,
deaths_per_thou = 1000 * deaths / population) %>%
filter(cases > 0, population > 0)
US_state_totals %>%
slice_min(deaths_per_thou, n = 10)
select(deaths_per_thou, cases_per_thou, everything())
US_state_totals %>%
slice_min(deaths_per_thou, n = 10)
select(deaths_per_thou, cases_per_thou, everything())
US_state_totals <- US_by_state %>%
group_by(Province_State) %>%
summarise(deaths = max(deaths), cases = max(cases),
population = max(Population),
cases_per_thou = 10000 * cases / population,
deaths_per_thou = 1000 * deaths / population) %>%
filter(cases > 0, population > 0)
US_state_totals %>%
slice_min(deaths_per_thou, n = 10)
select(deaths_per_thou, cases_per_thou, everything())
US_state_totals <- US_by_state %>%
group_by(Province_State) %>%
summarise(deaths = max(deaths), cases = max(cases),
population = max(Population),
cases_per_thou = 10000 * cases / population,
deaths_per_thou = 1000 * deaths / population) %>%
filter(cases > 0, population > 0)
US_state_totals %>%
slice_min(deaths_per_thou, n = 10)
US_state_totals %>%
slice_max(deaths_per_thou, n = 10)
# Fit a linear regression model
mod <- lm(deaths_per_thou ~ cases_per_thou, data = US_state_totals)
# Generate a sequence of values for cases_per_thou
x_grid <- seq(1, 151)
new_df <- tibble(cases_per_thou = x_grid)
US_state_totals %>% mutate(pred = predict(mod))
# Combine predictions with the original data
US_tot_w_pred <- US_state_totals %>%
mutate(pred = predict(mod))
# Visualize actual vs. predicted values
US_tot_w_pred %>%
ggplot() +
geom_point(aes(x = cases_per_thou, y = deaths_per_thou), color = "blue") +
geom_point(aes(x = cases_per_thou, y = pred), color = "red") +
labs(title = "Predicted Deaths per Thousand vs. Actual Deaths per Thousand", x = "Cases", y = "Deaths per Thousand")
US_state_totals <- US_by_state %>%
group_by(Province_State) %>%
summarise(deaths = max(deaths), cases = max(cases),
population = max(Population),
cases_per_thou = 1000 * cases / population,
deaths_per_thou = 1000 * deaths / population) %>%
filter(cases > 0, population > 0)
US_state_totals %>%
slice_min(deaths_per_thou, n = 10)
US_state_totals %>%
slice_max(deaths_per_thou, n = 10)
# Fit a linear regression model
mod <- lm(deaths_per_thou ~ cases_per_thou, data = US_state_totals)
# Generate a sequence of values for cases_per_thou
x_grid <- seq(1, 151)
new_df <- tibble(cases_per_thou = x_grid)
US_state_totals %>% mutate(pred = predict(mod))
# Combine predictions with the original data
US_tot_w_pred <- US_state_totals %>%
mutate(pred = predict(mod))
# Visualize actual vs. predicted values
US_tot_w_pred %>%
ggplot() +
geom_point(aes(x = cases_per_thou, y = deaths_per_thou), color = "blue") +
geom_point(aes(x = cases_per_thou, y = pred), color = "red") +
labs(title = "Predicted Deaths per Thousand vs. Actual Deaths per Thousand", x = "Cases", y = "Deaths per Thousand")
# Load the necessary library for SVM
library(e1071)
install.packages("e1071", lib="/opt/homebrew/Cellar/r/4.3.2/lib/R/library")
# Load the necessary library for SVM
library(e1071)
# Fit a Support Vector Machine model
svm_mod <- svm(deaths_per_thou ~ cases_per_thou, data = US_state_totals)
# Generate a sequence of values for cases_per_thou
x_grid <- seq(1, 151)
new_df <- tibble(cases_per_thou = x_grid)
# Make predictions using the SVM model
new_df$pred <- predict(svm_mod, newdata = new_df)
# Combine predictions with the original data
US_tot_w_pred_svm <- US_state_totals %>%
mutate(pred = predict(svm_mod))
# Visualize actual vs. predicted values using SVM
US_tot_w_pred_svm %>%
ggplot() +
geom_point(aes(x = cases_per_thou, y = deaths_per_thou), color = "blue") +
geom_line(data = new_df, aes(x = cases_per_thou, y = pred), color = "red") +
labs(title = "Predicted Deaths per Thousand vs. Actual Deaths per Thousand (SVM)", x = "Cases", y = "Deaths per Thousand")
# Load the necessary library for SVM
library(e1071)
# Fit a Support Vector Machine model
svm_mod <- svm(deaths_per_thou ~ cases_per_thou, data = US_state_totals)
# Generate a sequence of values for cases_per_thou
x_grid <- data.frame(cases_per_thou = seq(min(US_state_totals$cases_per_thou), max(US_state_totals$cases_per_thou), length.out = 100))
# Make predictions using the SVM model
new_df <- cbind(x_grid, pred = predict(svm_mod, newdata = x_grid))
# Visualize actual vs. predicted values using SVM
ggplot() +
geom_point(data = US_state_totals, aes(x = cases_per_thou, y = deaths_per_thou), color = "blue") +
geom_line(data = new_df, aes(x = cases_per_thou, y = pred), color = "red") +
labs(title = "Predicted Deaths per Thousand vs. Actual Deaths per Thousand (SVM)", x = "Cases per Thousand", y = "Deaths per Thousand")
# Load the necessary library for SVM
library(e1071)
# Fit a Support Vector Machine model
svm_mod <- svm(deaths_per_thou ~ cases_per_thou, data = US_state_totals)
# Generate a sequence of values for cases_per_thou
x_grid <- data.frame(cases_per_thou = seq(min(US_state_totals$cases_per_thou), max(US_state_totals$cases_per_thou), length.out = 1000))
# Make predictions using the SVM model
new_df <- cbind(x_grid, pred = predict(svm_mod, newdata = x_grid))
# Visualize actual vs. predicted values using SVM
ggplot() +
geom_point(data = US_state_totals, aes(x = cases_per_thou, y = deaths_per_thou), color = "blue") +
geom_line(data = new_df, aes(x = cases_per_thou, y = pred), color = "red") +
labs(title = "Predicted Deaths per Thousand vs. Actual Deaths per Thousand (SVM)", x = "Cases per Thousand", y = "Deaths per Thousand")
# Load the necessary library for SVM
library(e1071)
# Fit a Support Vector Machine model
svm_mod <- svm(deaths_per_thou ~ cases_per_thou, data = US_state_totals)
# Generate a sequence of values for cases_per_thou
x_grid <- data.frame(cases_per_thou = seq(min(US_state_totals$cases_per_thou), max(US_state_totals$cases_per_thou), length.out = 10))
# Make predictions using the SVM model
new_df <- cbind(x_grid, pred = predict(svm_mod, newdata = x_grid))
# Visualize actual vs. predicted values using SVM
ggplot() +
geom_point(data = US_state_totals, aes(x = cases_per_thou, y = deaths_per_thou), color = "blue") +
geom_line(data = new_df, aes(x = cases_per_thou, y = pred), color = "red") +
labs(title = "Predicted Deaths per Thousand vs. Actual Deaths per Thousand (SVM)", x = "Cases per Thousand", y = "Deaths per Thousand")
# Load the necessary library for SVM
library(e1071)
# Fit a Support Vector Machine model
svm_mod <- svm(deaths_per_thou ~ cases_per_thou, data = US_state_totals)
# Generate a sequence of values for cases_per_thou
x_grid <- data.frame(cases_per_thou = seq(min(US_state_totals$cases_per_thou), max(US_state_totals$cases_per_thou), length.out = 100))
# Make predictions using the SVM model
new_df <- cbind(x_grid, pred = predict(svm_mod, newdata = x_grid))
# Visualize actual vs. predicted values using SVM
ggplot() +
geom_point(data = US_state_totals, aes(x = cases_per_thou, y = deaths_per_thou), color = "blue") +
geom_line(data = new_df, aes(x = cases_per_thou, y = pred), color = "red") +
labs(title = "Predicted Deaths per Thousand vs. Actual Deaths per Thousand (SVM)", x = "Cases per Thousand", y = "Deaths per Thousand")
# Load the necessary library for SVM
library(e1071)
# Fit a Support Vector Machine model
svm_mod <- svm(deaths_per_thou ~ cases_per_thou, data = US_state_totals)
# Generate a sequence of values for cases_per_thou
x_grid <- data.frame(cases_per_thou = seq(min(US_state_totals$cases_per_thou), max(US_state_totals$cases_per_thou), length.out = 1000))
# Make predictions using the SVM model
new_df <- cbind(x_grid, pred = predict(svm_mod, newdata = x_grid))
# Visualize actual vs. predicted values using SVM
ggplot() +
geom_point(data = US_state_totals, aes(x = cases_per_thou, y = deaths_per_thou), color = "blue") +
geom_line(data = new_df, aes(x = cases_per_thou, y = pred), color = "red") +
labs(title = "Predicted Deaths per Thousand vs. Actual Deaths per Thousand (SVM)", x = "Cases per Thousand", y = "Deaths per Thousand")
# Load the necessary library for SVM
library(e1071)
# Fit a Support Vector Machine model
svm_mod <- svm(deaths_per_thou ~ cases_per_thou, data = US_state_totals)
# Generate a sequence of values for cases_per_thou
x_grid <- data.frame(cases_per_thou = seq(min(US_state_totals$cases_per_thou), max(US_state_totals$cases_per_thou), length.out = 10000))
# Make predictions using the SVM model
new_df <- cbind(x_grid, pred = predict(svm_mod, newdata = x_grid))
# Visualize actual vs. predicted values using SVM
ggplot() +
geom_point(data = US_state_totals, aes(x = cases_per_thou, y = deaths_per_thou), color = "blue") +
geom_line(data = new_df, aes(x = cases_per_thou, y = pred), color = "red") +
labs(title = "Predicted Deaths per Thousand vs. Actual Deaths per Thousand (SVM)", x = "Cases per Thousand", y = "Deaths per Thousand")
# Load the necessary library for SVM
library(e1071)
# Fit a Support Vector Machine model
svm_mod <- svm(deaths_per_thou ~ cases_per_thou, data = US_state_totals)
# Generate a sequence of values for cases_per_thou
x_grid <- data.frame(cases_per_thou = seq(min(US_state_totals$cases_per_thou), max(US_state_totals$cases_per_thou), length.out = 10000000))
# Make predictions using the SVM model
new_df <- cbind(x_grid, pred = predict(svm_mod, newdata = x_grid))
# Visualize actual vs. predicted values using SVM
ggplot() +
geom_point(data = US_state_totals, aes(x = cases_per_thou, y = deaths_per_thou), color = "blue") +
geom_line(data = new_df, aes(x = cases_per_thou, y = pred), color = "red") +
labs(title = "Predicted Deaths per Thousand vs. Actual Deaths per Thousand (SVM)", x = "Cases per Thousand", y = "Deaths per Thousand")
# Load the necessary library for Random Forest
library(randomForest)
# Fit a Random Forest model to predict cases per thousand
rf_mod <- randomForest(cases_per_thou ~ deaths_per_mill + Population, data = US_state_totals)
# Load the necessary library for Random Forest
library(randomForest)
# Fit a Random Forest model to predict cases per thousand
rf_mod <- randomForest(cases_per_thou ~ deaths_per_thou + Population, data = US_state_totals)
# Load the necessary library for Random Forest
library(randomForest)
# Fit a Random Forest model to predict cases per thousand
rf_mod <- randomForest(cases_per_thou ~ deaths_per_thou + US_state_totals$Population, data = US_state_totals)
# Load the necessary library for Random Forest
library(randomForest)
# Fit a Random Forest model to predict cases per thousand
rf_mod <- randomForest(cases_per_thou ~ deaths_per_thou + date, data = US_state_totals)
US_state_totals
# Load the necessary library for Random Forest
library(randomForest)
# Fit a Random Forest model to predict cases per thousand
rf_mod <- randomForest(cases_per_thou ~ deaths_per_thou + population, data = US_state_totals)
# Make predictions using the Random Forest model
US_state_totals$pred_cases_per_thou <- predict(rf_mod, newdata = US_state_totals)
# Visualize actual vs. predicted values using Random Forest
ggplot(US_state_totals) +
geom_point(aes(x = deaths_per_thou, y = cases_per_thou), color = "blue") +
geom_line(aes(x = deaths_per_thou, y = pred_cases_per_thou), color = "red") +
labs(title = "Predicted Cases per Thousand vs. Actual Cases per Thousand (Random Forest)", x = "Deaths per Million", y = "Cases per Thousand")
# Load the necessary library for Random Forest
library(randomForest)
# Fit a Random Forest model to predict cases per thousand
rf_mod <- randomForest(cases_per_thou ~ deaths_per_thou + population, data = US_state_totals)
# Make predictions using the Random Forest model
US_state_totals$pred_cases_per_thou <- predict(rf_mod, newdata = US_state_totals)
# Visualize actual vs. predicted values using Random Forest
ggplot(US_state_totals) +
geom_point(aes(x = deaths_per_thou, y = cases_per_thou), color = "blue") +
geom_line(aes(x = deaths_per_thou, y = pred_cases_per_thou), color = "red") +
labs(title = "Predicted Cases per Thousand vs. Actual Cases per Thousand (Random Forest)", x = "Deaths per Thousand", y = "Cases per Thousand")
# Load the necessary library for Random Forest
library(randomForest)
# Fit a Random Forest model to predict cases per thousand with adjusted parameters for better generalization
rf_mod <- randomForest(cases_per_thou ~ deaths_per_thou + population, data = US_state_totals, ntree = 100, mtry = 2)
# Make predictions using the Random Forest model
US_state_totals$pred_cases_per_thou <- predict(rf_mod, newdata = US_state_totals)
# Visualize actual vs. predicted values using Random Forest
ggplot(US_state_totals) +
geom_point(aes(x = deaths_per_thou, y = cases_per_thou), color = "blue") +
geom_line(aes(x = deaths_per_thou, y = pred_cases_per_thou), color = "red") +
labs(title = "Predicted Cases per Thousand vs. Actual Cases per Thousand (Random Forest)", x = "Deaths per Thousand", y = "Cases per Thousand")
# Load the necessary library for Random Forest
library(randomForest)
# Fit a Random Forest model to predict cases per thousand with adjusted parameters for better generalization
rf_mod <- randomForest(cases_per_thou ~ deaths_per_thou + population, data = US_state_totals, ntree = 1000, mtry = 2)
# Make predictions using the Random Forest model
US_state_totals$pred_cases_per_thou <- predict(rf_mod, newdata = US_state_totals)
# Visualize actual vs. predicted values using Random Forest
ggplot(US_state_totals) +
geom_point(aes(x = deaths_per_thou, y = cases_per_thou), color = "blue") +
geom_line(aes(x = deaths_per_thou, y = pred_cases_per_thou), color = "red") +
labs(title = "Predicted Cases per Thousand vs. Actual Cases per Thousand (Random Forest)", x = "Deaths per Thousand", y = "Cases per Thousand")
# Load the necessary library for Random Forest
library(randomForest)
# Fit a Random Forest model to predict cases per thousand with adjusted parameters for better generalization
rf_mod <- randomForest(cases_per_thou ~ deaths_per_thou + population, data = US_state_totals, ntree = 1, mtry = 2)
# Make predictions using the Random Forest model
US_state_totals$pred_cases_per_thou <- predict(rf_mod, newdata = US_state_totals)
# Visualize actual vs. predicted values using Random Forest
ggplot(US_state_totals) +
geom_point(aes(x = deaths_per_thou, y = cases_per_thou), color = "blue") +
geom_line(aes(x = deaths_per_thou, y = pred_cases_per_thou), color = "red") +
labs(title = "Predicted Cases per Thousand vs. Actual Cases per Thousand (Random Forest)", x = "Deaths per Thousand", y = "Cases per Thousand")
# Load the necessary library for Random Forest
library(randomForest)
# Fit a Random Forest model to predict cases per thousand with adjusted parameters for better generalization
rf_mod <- randomForest(cases_per_thou ~ deaths_per_thou + population, data = US_state_totals, ntree = 1000, mtry = 20)
# Make predictions using the Random Forest model
US_state_totals$pred_cases_per_thou <- predict(rf_mod, newdata = US_state_totals)
# Visualize actual vs. predicted values using Random Forest
ggplot(US_state_totals) +
geom_point(aes(x = deaths_per_thou, y = cases_per_thou), color = "blue") +
geom_line(aes(x = deaths_per_thou, y = pred_cases_per_thou), color = "red") +
labs(title = "Predicted Cases per Thousand vs. Actual Cases per Thousand (Random Forest)", x = "Deaths per Thousand", y = "Cases per Thousand")
# Fit a linear regression model
mod <- lm(deaths_per_thou ~ cases_per_thou, data = US_state_totals)
# Generate a sequence of values for cases_per_thou
x_grid <- seq(1, 151)
new_df <- tibble(cases_per_thou = x_grid)
US_state_totals %>% mutate(pred = predict(mod))
# Combine predictions with the original data
US_tot_w_pred <- US_state_totals %>%
mutate(pred = predict(mod))
# Visualize actual vs. predicted values
US_tot_w_pred %>%
ggplot() +
geom_point(aes(x = cases_per_thou, y = deaths_per_thou), color = "blue") +
geom_point(aes(x = cases_per_thou, y = pred), color = "red") +
labs(title = "Predicted Deaths per Thousand vs. Actual Deaths per Thousand", x = "Cases", y = "Deaths per Thousand")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(dplyr)
library(ggplot2)
url_in <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/"
file_names <- c("time_series_covid19_confirmed_global.csv","time_series_covid19_deaths_global.csv","time_series_covid19_confirmed_US.csv", "time_series_covid19_deaths_US.csv")
urls <- str_c(url_in,file_names)
global_cases <- read_csv(urls[1])
global_deaths <- read_csv(urls[2])
US_cases <- read_csv(urls[3])
US_deaths <- read_csv(urls[4])
# Reshape global_cases from wide to long format, removing Lat and Long columns
global_cases_long <- global_cases %>%
pivot_longer(
cols = -c("Province/State", "Country/Region", Lat, Long),
names_to = "date",
values_to = "cases"
) %>%
select(-c(Lat, Long))
# Reshape global_deaths from wide to long format, removing Lat and Long columns
global_deaths_long <- global_deaths %>%
pivot_longer(
cols = -c("Province/State", "Country/Region", Lat, Long),
names_to = "date",
values_to = "deaths"
) %>%
select(-c(Lat, Long))
# Join the cases and deaths data frames, rename columns, and convert date format
global <- global_cases_long %>%
full_join(global_deaths_long, by = c("Province/State", "Country/Region", "date")) %>%
rename(
Country_Region = "Country/Region",
Province_State = "Province/State"
) %>%
mutate(date = mdy(date))
summary(global)
# Remove any cases that are 0
global <- global %>% filter(cases > 0)
summary(global)
# Cleaning US_cases
US_cases <- US_cases %>%
pivot_longer(cols = -(UID:Combined_Key),
names_to = "date",
values_to = "cases") %>%
select(Admin2:cases) %>%
mutate(date = mdy(date)) %>%
select(-c(Lat, Long_))
US_deaths <- US_deaths %>%
pivot_longer(cols = -(UID:Population),
names_to = "date",
values_to = "deaths") %>%
select(Admin2:deaths) %>%
mutate(date = mdy(date)) %>%
select(-c(Lat, Long_))
# Joining US_cases and US_deaths
US <- US_cases %>%
full_join(US_deaths)
# Combined Keys so both data sets have the same keys
global <- global %>%
unite("Combined_Key",
c(Province_State, Country_Region),
sep = ", ",
na.rm = TRUE,
remove = FALSE)
global
uid_lookup_url <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/UID_ISO_FIPS_LookUp_Table.csv"
uid <- read_csv(uid_lookup_url, show_col_types = FALSE) %>%
select(-c(Lat, Long_, Combined_Key, code3, iso2, iso3, Admin2))
global <- global %>%
left_join(uid, by = c("Province_State", "Country_Region")) %>%
select(-c(UID, FIPS)) %>%
select(Province_State, Country_Region, date,
cases, deaths, Population,
Combined_Key)
global
# Visualizing the Data
US_by_state <- US %>%
group_by(Province_State, Country_Region, date) %>%
summarize(cases = sum(cases), deaths = sum(deaths),
Population = sum(Population)) %>%
mutate(deaths_per_mill = deaths *1000000 / Population) %>%
select(Province_State, Country_Region, date,
cases, deaths, deaths_per_mill, Population) %>%
ungroup()
tail(US_by_state)
totals <- US_by_state %>%
group_by(Country_Region, date) %>%
summarize(cases = sum(cases), deaths = sum(deaths),
Population = sum(Population), .groups = "drop") %>%
mutate(deaths_per_mill = deaths * 1000000 / Population) %>%
select(Country_Region, date, cases, deaths, deaths_per_mill, Population) %>%
ungroup()
tail(US_totals)
US_totals %>%
filter(cases > 0) %>%
ggplot(aes(x = date, y = cases)) +
geom_line(aes(color = "cases")) +
geom_point(aes(color = "cases" )) +
geom_line(aes(y = deaths, color = "deaths")) +
geom_point(aes(y = deaths, color = "deaths")) +
scale_y_log10() +
theme(legend.position="bottom",
axis.text.x = element_text(angle = 90)) +
labs(title = "COVID19 in US", y = NULL)
state <- "New York"
US_by_state %>%
filter(Province_State == state) %>%
filter(cases > 0, deaths > 0) %>%
ggplot(aes(x = date, y = cases)) +
geom_line(aes(color = "cases")) +
geom_point(aes(color = "cases")) +
geom_line(aes(y = deaths, color = "deaths")) +
geom_point(aes(y = deaths, color = "deaths")) +
scale_y_log10() +
theme(legend.position="bottom",
axis.text.x = element_text(angle = 90)) +
labs(title = paste("COVID19 in", state), y = NULL)
US_state_totals <- US_by_state %>%
group_by(Province_State) %>%
summarise(deaths = max(deaths), cases = max(cases),
population = max(Population),
cases_per_thou = 1000 * cases / population,
deaths_per_thou = 1000 * deaths / population) %>%
filter(cases > 0, population > 0)
US_state_totals %>%
slice_min(deaths_per_thou, n = 10)
US_state_totals %>%
slice_max(deaths_per_thou, n = 10)
# Fit a linear regression model
mod <- lm(deaths_per_thou ~ cases_per_thou, data = US_state_totals)
x_grid <- seq(1, 151)
new_df <- tibble(cases_per_thou = x_grid)
US_state_totals %>% mutate(pred = predict(mod))
US_tot_w_pred <- US_state_totals %>%
mutate(pred = predict(mod))
US_tot_w_pred %>%
ggplot() +
geom_point(aes(x = cases_per_thou, y = deaths_per_thou), color = "blue") +
geom_point(aes(x = cases_per_thou, y = pred), color = "red") +
labs(title = "Predicted Deaths per Thousand vs. Actual Deaths per Thousand", x = "Cases", y = "Deaths per Thousand")
# Visualizing the Data
US_by_state <- US %>%
group_by(Province_State, Country_Region, date) %>%
summarize(cases = sum(cases), deaths = sum(deaths),
Population = sum(Population)) %>%
mutate(deaths_per_mill = deaths *1000000 / Population) %>%
select(Province_State, Country_Region, date,
cases, deaths, deaths_per_mill, Population) %>%
ungroup()
tail(US_by_state)
US_totals <- US_by_state %>%
group_by(Country_Region, date) %>%
summarize(cases = sum(cases), deaths = sum(deaths),
Population = sum(Population), .groups = "drop") %>%
mutate(deaths_per_mill = deaths * 1000000 / Population) %>%
select(Country_Region, date, cases, deaths, deaths_per_mill, Population) %>%
ungroup()
tail(US_totals)
US_totals %>%
filter(cases > 0) %>%
ggplot(aes(x = date, y = cases)) +
geom_line(aes(color = "cases")) +
geom_point(aes(color = "cases" )) +
geom_line(aes(y = deaths, color = "deaths")) +
geom_point(aes(y = deaths, color = "deaths")) +
scale_y_log10() +
theme(legend.position="bottom",
axis.text.x = element_text(angle = 90)) +
labs(title = "COVID19 in US", y = NULL)
state <- "New York"
US_by_state %>%
filter(Province_State == state) %>%
filter(cases > 0, deaths > 0) %>%
ggplot(aes(x = date, y = cases)) +
geom_line(aes(color = "cases")) +
geom_point(aes(color = "cases")) +
geom_line(aes(y = deaths, color = "deaths")) +
geom_point(aes(y = deaths, color = "deaths")) +
scale_y_log10() +
theme(legend.position="bottom",
axis.text.x = element_text(angle = 90)) +
labs(title = paste("COVID19 in", state), y = NULL)
US_state_totals <- US_by_state %>%
group_by(Province_State) %>%
summarise(deaths = max(deaths), cases = max(cases),
population = max(Population),
cases_per_thou = 1000 * cases / population,
deaths_per_thou = 1000 * deaths / population) %>%
filter(cases > 0, population > 0)
US_state_totals %>%
slice_min(deaths_per_thou, n = 10)
US_state_totals %>%
slice_max(deaths_per_thou, n = 10)
# Fit a linear regression model
mod <- lm(deaths_per_thou ~ cases_per_thou, data = US_state_totals)
x_grid <- seq(1, 151)
new_df <- tibble(cases_per_thou = x_grid)
US_state_totals %>% mutate(pred = predict(mod))
US_tot_w_pred <- US_state_totals %>%
mutate(pred = predict(mod))
US_tot_w_pred %>%
ggplot() +
geom_point(aes(x = cases_per_thou, y = deaths_per_thou), color = "blue") +
geom_point(aes(x = cases_per_thou, y = pred), color = "red") +
labs(title = "Predicted Deaths per Thousand vs. Actual Deaths per Thousand", x = "Cases", y = "Deaths per Thousand")
